{
  "tasks": [
    {
      "id": "bc1b2fe3-ba2a-4679-9193-8007574a264e",
      "name": "메자닌 투자 데이터 모델 확장",
      "description": "stocks 모듈의 MonitoringStock 모델에 메자닌 투자 관련 필드 추가 및 패리티 계산 로직 구현. conversion_price, conversion_price_floor, category, acquisition_price 필드 추가하고 패리티 계산 메서드 구현.",
      "notes": "기존 데이터 호환성 유지 필수. 기본값 설정으로 기존 종목 데이터 보호",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-07-20T02:35:35.533Z",
      "updatedAt": "2025-07-20T02:35:35.533Z",
      "relatedFiles": [
        {
          "path": "C:\\2dept\\backend\\app\\modules\\stocks\\models.py",
          "type": "TO_MODIFY",
          "description": "MonitoringStock 모델 확장",
          "lineStart": 80,
          "lineEnd": 120
        }
      ],
      "implementationGuide": "1. backend/app/modules/stocks/models.py 수정\\n- MonitoringStock 클래스에 필드 추가: conversion_price, conversion_price_floor, category, acquisition_price\\n- 패리티 계산 메서드 추가: calculate_parity(), calculate_parity_floor()\\n2. 기존 purchase_price를 acquisition_price로 통합\\n3. category 필드에 'mezzanine', 'other' enum 값 설정",
      "verificationCriteria": "새 필드가 추가되고 패리티 계산이 정확히 동작하며, 기존 종목 데이터가 손상되지 않음",
      "analysisResult": "C:\\2dept 프로젝트에 simple_stock_manager_integrated.py와 dart_monitor.py의 고급 기능들을 웹 환경으로 통합 구현. 현재 React + FastAPI 아키텍처는 완성되어 있으나, 메자닌 투자 관리, 복잡한 알림 시스템, UI 고도화, 자동화 기능이 누락된 상태. 백엔드 core 로직 수정 금지 원칙 하에 프론트엔드 중심으로 기능 확장."
    },
    {
      "id": "23baf934-4e24-4d26-a0f8-51da1e7ba119",
      "name": "복잡한 알림 시스템 데이터 구조 구현",
      "description": "triggered_alerts 추적 시스템과 alert_prices 복잡한 배열 구조 구현. set 기반 중복 알림 방지, 일일 리셋 로직, 다종 알림 조건 지원.",
      "notes": "simple_stock_manager_integrated.py의 알림 로직과 동일하게 구현",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "bc1b2fe3-ba2a-4679-9193-8007574a264e"
        }
      ],
      "createdAt": "2025-07-20T02:35:35.533Z",
      "updatedAt": "2025-07-20T02:35:35.533Z",
      "relatedFiles": [
        {
          "path": "C:\\2dept\\backend\\app\\modules\\stocks\\models.py",
          "type": "TO_MODIFY",
          "description": "알림 관련 모델 추가",
          "lineStart": 120,
          "lineEnd": 200
        }
      ],
      "implementationGuide": "1. triggered_alerts Set[str] 필드 추가\\n2. alert_prices List[AlertPrice] 복잡한 구조 정의\\n3. daily_up_alert_sent, daily_down_alert_sent 필드 추가\\n4. 일일 리셋 로직 메서드 구현\\n5. 알림 ID 기반 중복 방지 로직",
      "verificationCriteria": "알림 중복 방지가 정상 동작하고, 일일 리셋이 정확히 수행됨",
      "analysisResult": "C:\\2dept 프로젝트에 simple_stock_manager_integrated.py와 dart_monitor.py의 고급 기능들을 웹 환경으로 통합 구현. 현재 React + FastAPI 아키텍처는 완성되어 있으나, 메자닌 투자 관리, 복잡한 알림 시스템, UI 고도화, 자동화 기능이 누락된 상태. 백엔드 core 로직 수정 금지 원칙 하에 프론트엔드 중심으로 기능 확장."
    },
    {
      "id": "79d393ef-545f-4a38-b16e-980406baf909",
      "name": "stocks 서비스 레이어 확장",
      "description": "패리티 계산, 복잡한 알림 조건 평가, 메자닌 분류별 처리 로직을 service.py에 추가. 기존 서비스 메서드를 확장하여 새로운 기능 지원.",
      "notes": "기존 API 엔드포인트 시그니처 변경 금지. 기능 확장만 허용",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "23baf934-4e24-4d26-a0f8-51da1e7ba119"
        }
      ],
      "createdAt": "2025-07-20T02:35:35.533Z",
      "updatedAt": "2025-07-20T02:35:35.533Z",
      "relatedFiles": [
        {
          "path": "C:\\2dept\\backend\\app\\modules\\stocks\\service.py",
          "type": "TO_MODIFY",
          "description": "서비스 로직 확장",
          "lineStart": 1,
          "lineEnd": 300
        }
      ],
      "implementationGuide": "1. get_monitoring_stocks()에 패리티 계산 추가\\n2. check_alert_conditions()에 메자닌별 알림 로직 구현\\n3. calculate_portfolio_summary()에 메자닌/기타 분리 통계\\n4. send_daily_email()에 분리된 이메일 템플릿 적용",
      "verificationCriteria": "패리티 계산이 정확하고, 메자닌/기타 분류별 처리가 정상 동작함",
      "analysisResult": "C:\\2dept 프로젝트에 simple_stock_manager_integrated.py와 dart_monitor.py의 고급 기능들을 웹 환경으로 통합 구현. 현재 React + FastAPI 아키텍처는 완성되어 있으나, 메자닌 투자 관리, 복잡한 알림 시스템, UI 고도화, 자동화 기능이 누락된 상태. 백엔드 core 로직 수정 금지 원칙 하에 프론트엔드 중심으로 기능 확장."
    },
    {
      "id": "e8b87efe-673c-400f-b9fd-9f6c9d580105",
      "name": "메자닌 전용 프론트엔드 컴포넌트 개발",
      "description": "메자닌 종목 전용 UI 컴포넌트 개발. 패리티 표시, 전환가 설정, 색상 코딩(100% 기준 red/green) 등 메자닌 특화 기능 구현.",
      "notes": "TailwindCSS 유틸리티 클래스만 사용. 기존 ui 컴포넌트 재사용",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "79d393ef-545f-4a38-b16e-980406baf909"
        }
      ],
      "createdAt": "2025-07-20T02:35:35.533Z",
      "updatedAt": "2025-07-20T02:35:35.533Z",
      "relatedFiles": [
        {
          "path": "C:\\2dept\\frontend\\src\\components\\MezzanineStockCard.tsx",
          "type": "CREATE",
          "description": "메자닌 전용 UI 컴포넌트"
        },
        {
          "path": "C:\\2dept\\frontend\\src\\types\\stocks.ts",
          "type": "TO_MODIFY",
          "description": "메자닌 관련 타입 정의 추가"
        }
      ],
      "implementationGuide": "1. MezzanineStockCard.tsx 컴포넌트 생성\\n2. 패리티 % 표시 및 색상 코딩 (>=100% green, <100% red)\\n3. 전환가, 전환가(floor) 입력 필드\\n4. 패리티 알림 설정 (80%, 100%, 120%)\\n5. 메자닌 전용 통계 위젯",
      "verificationCriteria": "메자닌 종목의 패리티가 올바르게 계산되어 표시되고, 색상 코딩이 정확함",
      "analysisResult": "C:\\2dept 프로젝트에 simple_stock_manager_integrated.py와 dart_monitor.py의 고급 기능들을 웹 환경으로 통합 구현. 현재 React + FastAPI 아키텍처는 완성되어 있으나, 메자닌 투자 관리, 복잡한 알림 시스템, UI 고도화, 자동화 기능이 누락된 상태. 백엔드 core 로직 수정 금지 원칙 하에 프론트엔드 중심으로 기능 확장."
    },
    {
      "id": "1ef45bb3-3a8e-4f36-b895-8abd8cb05a5c",
      "name": "StocksPage 고도화 - 카테고리 필터링",
      "description": "StocksPage에 메자닌/기타 분류 필터 탭, 고급 종목 설정 모달, 컬럼 동적 변경 기능 추가. 메자닌일 때 패리티 컬럼 표시, 기타일 때 수익률 컬럼 표시.",
      "notes": "기존 StocksPage.tsx 구조 유지하면서 기능 확장",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "e8b87efe-673c-400f-b9fd-9f6c9d580105"
        }
      ],
      "createdAt": "2025-07-20T02:35:35.533Z",
      "updatedAt": "2025-07-20T02:35:35.533Z",
      "relatedFiles": [
        {
          "path": "C:\\2dept\\frontend\\src\\pages\\StocksPage.tsx",
          "type": "TO_MODIFY",
          "description": "카테고리 필터 및 동적 컬럼 추가",
          "lineStart": 1,
          "lineEnd": 300
        },
        {
          "path": "C:\\2dept\\frontend\\src\\components\\AdvancedStockModal.tsx",
          "type": "CREATE",
          "description": "고급 종목 설정 모달"
        }
      ],
      "implementationGuide": "1. 카테고리 필터 라디오버튼 (전체/메자닌/기타)\\n2. 메자닌 선택 시 테이블 컬럼 변경: 패리티(%), 패리티(floor)(%) 컬럼 추가\\n3. 기타 선택 시 수익률 컬럼 표시\\n4. AdvancedStockModal 컴포넌트로 전환가, 패리티 설정\\n5. 종목별 설정 아이콘 클릭으로 모달 열기",
      "verificationCriteria": "카테고리 필터가 정상 동작하고, 메자닌/기타별로 적절한 컬럼이 표시됨",
      "analysisResult": "C:\\2dept 프로젝트에 simple_stock_manager_integrated.py와 dart_monitor.py의 고급 기능들을 웹 환경으로 통합 구현. 현재 React + FastAPI 아키텍처는 완성되어 있으나, 메자닌 투자 관리, 복잡한 알림 시스템, UI 고도화, 자동화 기능이 누락된 상태. 백엔드 core 로직 수정 금지 원칙 하에 프론트엔드 중심으로 기능 확장."
    },
    {
      "id": "655e2bb6-2fd3-4104-955a-04fe06cc1b0e",
      "name": "실시간 로그 시스템 구현",
      "description": "백엔드 로그를 WebSocket으로 실시간 스트리밍하는 LogTextHandler 웹 버전 구현. 로그 레벨 필터링, 자동 스크롤, 로그 저장 기능 포함.",
      "notes": "simple_stock_manager_integrated.py의 LogTextHandler와 동일한 기능",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "1ef45bb3-3a8e-4f36-b895-8abd8cb05a5c"
        }
      ],
      "createdAt": "2025-07-20T02:35:35.533Z",
      "updatedAt": "2025-07-20T02:35:35.533Z",
      "relatedFiles": [
        {
          "path": "C:\\2dept\\backend\\app\\shared\\websocket.py",
          "type": "TO_MODIFY",
          "description": "로그 스트리밍 WebSocket 추가"
        },
        {
          "path": "C:\\2dept\\frontend\\src\\components\\LogViewer.tsx",
          "type": "CREATE",
          "description": "실시간 로그 뷰어 컴포넌트"
        }
      ],
      "implementationGuide": "1. backend WebSocket 로그 스트리밍 엔드포인트 추가\\n2. LogViewer.tsx 컴포넌트 생성\\n3. 로그 레벨 필터 (DEBUG, INFO, WARNING, ERROR)\\n4. 자동 스크롤 토글, 로그 클리어 기능\\n5. useWebSocket 훅 활용한 실시간 업데이트",
      "verificationCriteria": "백엔드 로그가 실시간으로 프론트엔드에 표시되고, 필터링이 정상 동작함",
      "analysisResult": "C:\\2dept 프로젝트에 simple_stock_manager_integrated.py와 dart_monitor.py의 고급 기능들을 웹 환경으로 통합 구현. 현재 React + FastAPI 아키텍처는 완성되어 있으나, 메자닌 투자 관리, 복잡한 알림 시스템, UI 고도화, 자동화 기능이 누락된 상태. 백엔드 core 로직 수정 금지 원칙 하에 프론트엔드 중심으로 기능 확장."
    },
    {
      "id": "8bc88c02-8df8-4421-a4ae-9e55e3182e14",
      "name": "테마 시스템 구현",
      "description": "light/dark/prompt 3가지 테마 지원. 테마 전환 토글, 로컬 스토리지 대신 Context API 사용한 상태 관리, TailwindCSS 다크모드 활용.",
      "notes": "브라우저 스토리지 사용 금지. Context API만 사용",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "655e2bb6-2fd3-4104-955a-04fe06cc1b0e"
        }
      ],
      "createdAt": "2025-07-20T02:35:35.533Z",
      "updatedAt": "2025-07-20T02:35:35.533Z",
      "relatedFiles": [
        {
          "path": "C:\\2dept\\frontend\\src\\contexts\\ThemeContext.tsx",
          "type": "CREATE",
          "description": "테마 Context 및 Provider"
        },
        {
          "path": "C:\\2dept\\frontend\\src\\components\\ThemeToggle.tsx",
          "type": "CREATE",
          "description": "테마 토글 컴포넌트"
        },
        {
          "path": "C:\\2dept\\frontend\\tailwind.config.js",
          "type": "TO_MODIFY",
          "description": "prompt 테마 색상 추가"
        }
      ],
      "implementationGuide": "1. ThemeContext.tsx 생성 (light/dark/prompt)\\n2. ThemeToggle.tsx 컴포넌트 생성\\n3. tailwind.config.js에 prompt 테마 색상 추가\\n4. index.css에 CSS 변수 정의\\n5. 모든 페이지/컴포넌트에 테마 적용",
      "verificationCriteria": "3가지 테마가 정상 전환되고, 새로고침 후에도 테마가 유지됨",
      "analysisResult": "C:\\2dept 프로젝트에 simple_stock_manager_integrated.py와 dart_monitor.py의 고급 기능들을 웹 환경으로 통합 구현. 현재 React + FastAPI 아키텍처는 완성되어 있으나, 메자닌 투자 관리, 복잡한 알림 시스템, UI 고도화, 자동화 기능이 누락된 상태. 백엔드 core 로직 수정 금지 원칙 하에 프론트엔드 중심으로 기능 확장."
    },
    {
      "id": "5e0a7bac-9abd-44a6-8b43-cfc4f2bd6cad",
      "name": "마감 자동 이메일 시스템 구현",
      "description": "15:35-15:40 시간대 자동 마감 요약 이메일 발송. 메자닌/기타 분리된 HTML 테이블, 수익률 계산, 패리티 표시 포함.",
      "notes": "simple_stock_manager_integrated.py의 send_daily_summary_email과 동일한 로직",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "8bc88c02-8df8-4421-a4ae-9e55e3182e14"
        }
      ],
      "createdAt": "2025-07-20T02:35:35.533Z",
      "updatedAt": "2025-07-20T02:35:35.533Z",
      "relatedFiles": [
        {
          "path": "C:\\2dept\\backend\\app\\shared\\email.py",
          "type": "TO_MODIFY",
          "description": "HTML 이메일 템플릿 추가"
        },
        {
          "path": "C:\\2dept\\backend\\app\\modules\\stocks\\monitor.py",
          "type": "TO_MODIFY",
          "description": "자동 이메일 스케줄러 추가"
        }
      ],
      "implementationGuide": "1. EmailService에 HTML 템플릿 생성 메서드 추가\\n2. 메자닌 전용 이메일 템플릿: 패리티 컬럼 포함\\n3. 기타 전용 이메일 템플릿: 수익률 컬럼 포함\\n4. APScheduler 15:35-15:40 자동 실행\\n5. 등락률 기준 정렬, 색상 코딩 적용",
      "verificationCriteria": "15:35-15:40에 자동으로 메자닌/기타 분리된 이메일이 발송됨",
      "analysisResult": "C:\\2dept 프로젝트에 simple_stock_manager_integrated.py와 dart_monitor.py의 고급 기능들을 웹 환경으로 통합 구현. 현재 React + FastAPI 아키텍처는 완성되어 있으나, 메자닌 투자 관리, 복잡한 알림 시스템, UI 고도화, 자동화 기능이 누락된 상태. 백엔드 core 로직 수정 금지 원칙 하에 프론트엔드 중심으로 기능 확장."
    },
    {
      "id": "62c8d4a9-df8e-4311-b453-7c712f72c6ba",
      "name": "종합 테스트 및 성능 최적화",
      "description": "전체 시스템 통합 테스트, 성능 최적화, 에러 처리 개선. 메자닌 기능의 모든 시나리오 테스트 및 기존 기능 회귀 테스트.",
      "notes": "기존 기능 동작 보장 필수. 성능 저하 없이 새 기능 추가 확인",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "5e0a7bac-9abd-44a6-8b43-cfc4f2bd6cad"
        }
      ],
      "createdAt": "2025-07-20T02:35:35.533Z",
      "updatedAt": "2025-07-20T02:35:35.533Z",
      "relatedFiles": [
        {
          "path": "C:\\2dept\\frontend\\src\\pages",
          "type": "TO_MODIFY",
          "description": "성능 최적화 적용"
        },
        {
          "path": "C:\\2dept\\backend\\app\\modules\\stocks",
          "type": "TO_MODIFY",
          "description": "에러 처리 개선"
        }
      ],
      "implementationGuide": "1. 메자닌 종목 추가/수정/삭제 테스트\\n2. 패리티 계산 정확성 검증\\n3. 알림 중복 방지 테스트\\n4. 실시간 로그 성능 테스트\\n5. 마감 이메일 발송 테스트\\n6. React.memo, useMemo 적용으로 성능 최적화",
      "verificationCriteria": "모든 기능이 정상 동작하고, 기존 기능에 영향 없으며, 성능 기준을 충족함",
      "analysisResult": "C:\\2dept 프로젝트에 simple_stock_manager_integrated.py와 dart_monitor.py의 고급 기능들을 웹 환경으로 통합 구현. 현재 React + FastAPI 아키텍처는 완성되어 있으나, 메자닌 투자 관리, 복잡한 알림 시스템, UI 고도화, 자동화 기능이 누락된 상태. 백엔드 core 로직 수정 금지 원칙 하에 프론트엔드 중심으로 기능 확장."
    }
  ]
}