{
  "tasks": [
    {
      "id": "2fd3c9ed-f20e-435f-8533-dfbe7c94c6fc",
      "name": "프론트엔드 API 클라이언트 포트 설정 수정",
      "description": "apiClient.ts 파일의 API_BASE_URL을 잘못된 포트 8892에서 정상 포트 8000으로 변경하여 백엔드와의 연결을 복구합니다. 동시에 환경변수 설정을 정규화하고 하드코딩된 URL을 정리합니다.",
      "notes": "백엔드 서버가 포트 8000에서 정상 동작 중이므로 즉시 연결 가능해집니다. 환경변수 설정도 함께 정리하여 향후 포트 변경 시 유연하게 대응할 수 있도록 합니다.",
      "status": "in_progress",
      "dependencies": [],
      "createdAt": "2025-07-25T13:46:59.392Z",
      "updatedAt": "2025-07-25T13:47:11.247Z",
      "relatedFiles": [
        {
          "path": "C:\\2dept\\frontend\\src\\services\\apiClient.ts",
          "type": "TO_MODIFY",
          "description": "API 베이스 URL 포트 변경 및 환경변수 설정 정규화",
          "lineStart": 3,
          "lineEnd": 6
        }
      ],
      "implementationGuide": "1. apiClient.ts 파일 열기\\n2. API_BASE_URL 상수를 'http://localhost:8000'으로 변경\\n3. 환경변수 주석 처리된 부분 활성화 검토\\n4. 포트 8892 관련 모든 참조 제거\\n5. 개발/운영 환경 구분 로직 점검",
      "verificationCriteria": "수정 후 브라우저에서 API 호출이 성공하고 실제 백엔드 데이터가 반환되는지 확인. curl 명령어로 엔드포인트 테스트 가능해야 함.",
      "analysisResult": "프론트엔드가 백엔드의 실제 데이터를 표시하지 못하는 문제의 핵심 원인은 포트 불일치입니다. 백엔드는 포트 8000에서 정상 동작하며 실제 주가 데이터를 제공하고 있지만, 프론트엔드 API 클라이언트는 포트 8892로 호출을 시도하여 연결에 실패하고 있습니다. 이를 해결하기 위해 프론트엔드 설정 수정, API 연결 검증, WebSocket 통신 점검을 순차적으로 수행해야 합니다."
    },
    {
      "id": "d374bdef-5307-4b93-8f2b-a81df7b3d2b5",
      "name": "백엔드 API 엔드포인트 연결 검증",
      "description": "프론트엔드에서 사용하는 주요 API 엔드포인트들이 정상적으로 호출되고 실제 데이터를 반환하는지 테스트합니다. DART 공시 데이터, 주가 모니터링 데이터, 설정 등의 API 응답을 확인합니다.",
      "notes": "백엔드가 이미 실제 데이터를 반환하고 있으므로 API 연결만 복구되면 즉시 정상 동작할 것입니다. 각 엔드포인트별로 데이터 형식과 내용을 확인하여 프론트엔드 컴포넌트에서 올바르게 파싱되는지 점검합니다.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "2fd3c9ed-f20e-435f-8533-dfbe7c94c6fc"
        }
      ],
      "createdAt": "2025-07-25T13:46:59.392Z",
      "updatedAt": "2025-07-25T13:46:59.392Z",
      "relatedFiles": [
        {
          "path": "C:\\2dept\\backend\\app\\main.py",
          "type": "REFERENCE",
          "description": "백엔드 API 엔드포인트 라우팅 확인",
          "lineStart": 100,
          "lineEnd": 120
        },
        {
          "path": "C:\\2dept\\backend\\app\\data\\monitoring_stocks.json",
          "type": "REFERENCE",
          "description": "실제 주가 모니터링 데이터 확인"
        }
      ],
      "implementationGuide": "1. 브라우저 개발자 도구 Network 탭 열기\\n2. 주요 API 엔드포인트 직접 호출 테스트:\\n   - /api/stocks/monitoring (주가 데이터)\\n   - /api/dart/disclosures (공시 데이터)\\n   - /api/dart/keywords (키워드 설정)\\n   - /health (헬스체크)\\n3. 응답 데이터 구조 및 내용 검증\\n4. 에러 응답 처리 로직 확인",
      "verificationCriteria": "모든 주요 API 엔드포인트가 정상 응답하고 실제 데이터를 반환해야 함. CORS 에러나 네트워크 오류가 발생하지 않아야 함.",
      "analysisResult": "프론트엔드가 백엔드의 실제 데이터를 표시하지 못하는 문제의 핵심 원인은 포트 불일치입니다. 백엔드는 포트 8000에서 정상 동작하며 실제 주가 데이터를 제공하고 있지만, 프론트엔드 API 클라이언트는 포트 8892로 호출을 시도하여 연결에 실패하고 있습니다. 이를 해결하기 위해 프론트엔드 설정 수정, API 연결 검증, WebSocket 통신 점검을 순차적으로 수행해야 합니다."
    },
    {
      "id": "256b0c2d-2346-4bd9-b6b0-9072520d2f34",
      "name": "프론트엔드 컴포넌트의 실제 데이터 렌더링 확인",
      "description": "주가 모니터링 페이지, DART 공시 페이지 등 주요 컴포넌트에서 샘플 데이터 대신 백엔드에서 받은 실제 데이터가 올바르게 표시되는지 확인하고 필요시 데이터 파싱 로직을 수정합니다.",
      "notes": "백엔드 API 연결이 복구되면 React Query를 통해 자동으로 실제 데이터가 로드될 것입니다. 하드코딩된 샘플 데이터가 있다면 제거하고 API 응답 데이터만 사용하도록 수정합니다.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "d374bdef-5307-4b93-8f2b-a81df7b3d2b5"
        }
      ],
      "createdAt": "2025-07-25T13:46:59.392Z",
      "updatedAt": "2025-07-25T13:46:59.392Z",
      "relatedFiles": [
        {
          "path": "C:\\2dept\\frontend\\src\\pages\\StocksPage.tsx",
          "type": "TO_MODIFY",
          "description": "주가 데이터 렌더링 로직 확인 및 샘플 데이터 제거"
        },
        {
          "path": "C:\\2dept\\frontend\\src\\pages\\DartPage.tsx",
          "type": "TO_MODIFY",
          "description": "DART 공시 데이터 렌더링 로직 확인"
        }
      ],
      "implementationGuide": "1. 주가 모니터링 페이지 (StocksPage) 접속\\n2. 실제 주가 데이터 표시 여부 확인:\\n   - 삼성전자, SK하이닉스, NAVER, LG전자 실시간 가격\\n   - 변동률, 거래량 정보\\n   - 목표가/손절가 설정값\\n3. DART 공시 페이지에서 실제 공시 데이터 확인\\n4. 샘플 데이터 하드코딩 부분 제거\\n5. 로딩 상태 및 에러 처리 개선",
      "verificationCriteria": "프론트엔드 페이지에서 실제 백엔드 데이터가 정상 표시되고 샘플 데이터나 하드코딩된 값이 나타나지 않아야 함. 실시간 가격 업데이트가 정상 동작해야 함.",
      "analysisResult": "프론트엔드가 백엔드의 실제 데이터를 표시하지 못하는 문제의 핵심 원인은 포트 불일치입니다. 백엔드는 포트 8000에서 정상 동작하며 실제 주가 데이터를 제공하고 있지만, 프론트엔드 API 클라이언트는 포트 8892로 호출을 시도하여 연결에 실패하고 있습니다. 이를 해결하기 위해 프론트엔드 설정 수정, API 연결 검증, WebSocket 통신 점검을 순차적으로 수행해야 합니다."
    },
    {
      "id": "16727f61-91d0-4be2-8a1a-15a42cfafc35",
      "name": "WebSocket 실시간 통신 연결 및 이벤트 수신 확인",
      "description": "WebSocket 연결이 정상적으로 이루어지고 실시간 주가 업데이트, DART 알림 등의 이벤트가 올바르게 수신되어 UI에 반영되는지 확인합니다. useWebSocket 훅의 동작을 점검하고 연결 문제를 해결합니다.",
      "notes": "WebSocket은 이미 올바른 포트(8000)로 설정되어 있어 정상 동작할 것으로 예상됩니다. 연결 상태를 확인하고 실시간 데이터 수신이 UI에 반영되는지 점검합니다.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "2fd3c9ed-f20e-435f-8533-dfbe7c94c6fc"
        }
      ],
      "createdAt": "2025-07-25T13:46:59.392Z",
      "updatedAt": "2025-07-25T13:46:59.392Z",
      "relatedFiles": [
        {
          "path": "C:\\2dept\\frontend\\src\\hooks\\useWebSocket.ts",
          "type": "REFERENCE",
          "description": "WebSocket 연결 로직 및 이벤트 처리 확인",
          "lineStart": 8,
          "lineEnd": 15
        },
        {
          "path": "C:\\2dept\\backend\\app\\main.py",
          "type": "REFERENCE",
          "description": "백엔드 WebSocket 엔드포인트 확인",
          "lineStart": 85,
          "lineEnd": 95
        }
      ],
      "implementationGuide": "1. useWebSocket 훅에서 WS_URL 포트 확인 (현재 8000으로 설정됨)\\n2. 브라우저 개발자 도구 Network 탭에서 WebSocket 연결 상태 모니터링\\n3. WebSocket 메시지 송수신 로그 확인\\n4. 실시간 이벤트 수신 테스트:\\n   - stock_update 이벤트\\n   - dart_update 이벤트\\n   - system_status 이벤트\\n5. 연결 끊김 시 자동 재연결 로직 테스트",
      "verificationCriteria": "WebSocket 연결이 성공하고 실시간 데이터 업데이트가 프론트엔드 UI에 즉시 반영되어야 함. 연결 끊김 시 자동 재연결이 동작해야 함.",
      "analysisResult": "프론트엔드가 백엔드의 실제 데이터를 표시하지 못하는 문제의 핵심 원인은 포트 불일치입니다. 백엔드는 포트 8000에서 정상 동작하며 실제 주가 데이터를 제공하고 있지만, 프론트엔드 API 클라이언트는 포트 8892로 호출을 시도하여 연결에 실패하고 있습니다. 이를 해결하기 위해 프론트엔드 설정 수정, API 연결 검증, WebSocket 통신 점검을 순차적으로 수행해야 합니다."
    },
    {
      "id": "3dd5de97-a8de-47c3-9662-831dd988500a",
      "name": "환경변수 및 설정 파일 통합 정리",
      "description": "프론트엔드와 백엔드의 환경변수 설정을 정리하여 향후 포트 변경이나 환경 전환 시 일관성을 유지할 수 있도록 개선합니다. .env 파일들을 점검하고 설정값을 통일합니다.",
      "notes": "현재 하드코딩된 URL들을 환경변수로 관리하여 환경별 설정 변경을 용이하게 만듭니다. 개발 환경에서는 localhost, 운영 환경에서는 실제 서버 주소로 쉽게 전환할 수 있도록 설정합니다.",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "256b0c2d-2346-4bd9-b6b0-9072520d2f34"
        }
      ],
      "createdAt": "2025-07-25T13:46:59.392Z",
      "updatedAt": "2025-07-25T13:46:59.392Z",
      "relatedFiles": [
        {
          "path": "C:\\2dept\\frontend\\.env.development",
          "type": "TO_MODIFY",
          "description": "개발 환경 설정값 정리"
        },
        {
          "path": "C:\\2dept\\frontend\\vite.config.ts",
          "type": "REFERENCE",
          "description": "Vite 환경변수 설정 확인"
        },
        {
          "path": "C:\\2dept\\backend\\.env",
          "type": "REFERENCE",
          "description": "백엔드 환경변수 설정 확인"
        }
      ],
      "implementationGuide": "1. 프론트엔드 .env 파일들 확인:\\n   - .env\\n   - .env.development\\n   - .env.example\\n2. 백엔드 .env 파일 확인\\n3. API URL, WebSocket URL 환경변수 통일\\n4. 개발/운영 환경별 설정 분리\\n5. vite.config.ts에서 환경변수 로딩 확인\\n6. 설정 문서화",
      "verificationCriteria": "환경변수를 통한 설정 변경이 정상 동작하고, 개발/운영 환경 구분이 명확해야 함. 하드코딩된 URL이 제거되고 설정 파일로 관리되어야 함.",
      "analysisResult": "프론트엔드가 백엔드의 실제 데이터를 표시하지 못하는 문제의 핵심 원인은 포트 불일치입니다. 백엔드는 포트 8000에서 정상 동작하며 실제 주가 데이터를 제공하고 있지만, 프론트엔드 API 클라이언트는 포트 8892로 호출을 시도하여 연결에 실패하고 있습니다. 이를 해결하기 위해 프론트엔드 설정 수정, API 연결 검증, WebSocket 통신 점검을 순차적으로 수행해야 합니다."
    }
  ]
}